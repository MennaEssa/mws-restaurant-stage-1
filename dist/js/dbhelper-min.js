const indexdb_name="restaurants_info",reviews_store="reviews",indexdb_store="restaurants",syncFav_store="syncFav",syncRev_store="syncRev",port=1337;class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static indexdb_init(){return idb.open(indexdb_name,1,function(e){switch(e.oldVersion){case 0:e.createObjectStore(indexdb_store,{keyPath:"id"}),e.createObjectStore(reviews_store),e.createObjectStore(syncFav_store),e.createObjectStore(syncRev_store)}})}static timeConverter(e){var t=new Date(e),r=new Date,n=new Date(Date.now()-864e5),s=t.getFullYear(),a=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t.getMonth()],o=t.getDate(),i=t.getHours(),l=t.getMinutes();return t.setHours(0,0,0,0)==r.setHours(0,0,0,0)?"today, "+i+":"+l:t.setHours(0,0,0,0)==n.setHours(0,0,0,0)?"yesterday, "+i+":"+l:s==r.getFullYear()?o+" "+a+", "+i+":"+l:o+" "+a+" "+s+", "+i+":"+l}static getCachedRestaurants(){return DBHelper.indexdb_init().then(function(e){return e.transaction(indexdb_store).objectStore(indexdb_store).getAll()})}static getChachedReviews(e){return DBHelper.indexdb_init().then(function(t){return t.transaction(reviews_store).objectStore(reviews_store).get(e)})}static getRestaurantReview(e){return fetch(`http://localhost:${port}/reviews/?restaurant_id=${e}`).then(e=>e.json().then(e=>e))}static fetchRestaurants(e){fetch(DBHelper.DATABASE_URL).then(t=>{t.json().then(t=>{DBHelper.indexdb_init().then(function(r){var n=r.transaction(indexdb_store,"readwrite"),s=n.objectStore(indexdb_store);for(var a in t)s.put(t[a]);e(null,t),n.complete.then(console.log("updating db."))})})}).catch(t=>{DBHelper.getCachedRestaurants().then(t=>t.length>0?e(null,t):e("failed to fetch restaurant data",null)).catch(()=>e("failed to fetch restaurants data from db",null))})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?DBHelper.getRestaurantReview(e).then(n=>{r.reviews=n,r.reviews.forEach(e=>e.date=DBHelper.timeConverter(e.createdAt)),DBHelper.indexdb_init().then(t=>{var n=t.transaction(reviews_store,"readwrite");n.objectStore(reviews_store).put(r.reviews,e),console.log(r.reviews),n.complete.then(console.log(`updated review with id ${e}`)).catch(e=>console.log(e))}),t(null,r)}).catch(()=>{DBHelper.getChachedReviews(e).then(e=>{r.reviews=e,console.log("this is form indexdb"),console.log(r.reviews),t(null,r)})}):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,s)=>{if(n)r(n,null);else{let n=s;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return null!=e.photograph?`dist/img/${e.photograph}.webp`:"dist/img/not_available.webp"}static altForRestaurant(e){return`photograph of ${e.name}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static updateFav(e,t){let r=DBHelper.DATABASE_URL+`/${e}/?is_favorite=${t}`;return fetch(r,{method:"PUT"}).then(()=>{console.log("fav updated successfully")}).catch(e=>{console.log(e)})}static sendReview(e){return fetch("http://localhost:1337/reviews/",{method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(e)}).then(console.log("posted review!")).catch(e=>console.log("error"))}}